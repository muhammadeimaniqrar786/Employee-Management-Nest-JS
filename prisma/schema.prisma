// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id          Int                 @id @default(autoincrement())
  name        String              @db.VarChar(255)
  created_at  DateTime            @default(now())
  updated_at  DateTime            @default(now()) @updatedAt
  deleted_at  DateTime?
  permissions RoleHasPermission[]
  users       UserHasRole[]

  @@map("roles")
}

model Permission {
  id         Int                 @id @default(autoincrement())
  name       String              @db.VarChar(255)
  parent_id  Int?
  created_at DateTime            @default(now())
  updated_at DateTime            @default(now()) @updatedAt
  deleted_at DateTime?
  roles      RoleHasPermission[]

  @@map("permissions")
}

model RoleHasPermission {
  id            Int        @id @default(autoincrement())
  role          Role       @relation(fields: [role_id], references: [id])
  role_id       Int
  permission    Permission @relation(fields: [permission_id], references: [id])
  permission_id Int
  created_at    DateTime   @default(now())
  updated_at    DateTime   @default(now()) @updatedAt
  deleted_at    DateTime?

  @@map("role_has_permissions")
}

model UserHasRole {
  id         Int       @id @default(autoincrement())
  user       User      @relation(fields: [user_id], references: [id])
  user_id    Int
  role       Role      @relation(fields: [role_id], references: [id])
  role_id    Int
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("user_has_roles")
}

model User {
  id         Int                  @id @default(autoincrement())
  name       String               @db.VarChar(255)
  username   String               @unique @db.VarChar(255)
  email      String               @unique @db.VarChar(255)
  password   String               @db.VarChar(255)
  created_at DateTime             @default(now())
  updated_at DateTime             @default(now()) @updatedAt
  deleted_at DateTime?
  roles      UserHasRole[]
  employees  EmployeesData[]
  employee   EmployeeHasManager[] @relation("employee")
  manager    EmployeeHasManager[] @relation("manager")

  @@map("users")
}

model EmployeesData {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [user_id], references: [id])
  user_id       Int
  phone         String         @db.VarChar(255)
  address       String         @db.VarChar(255)
  designation   String         @db.VarChar(255)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @default(now()) @updatedAt
  deleted_at    DateTime?
  assignedTasks EmployeeTask[] @relation("assignedTo")
  tasksAssigned EmployeeTask[] @relation("assigner")

  @@map("employees_data")
}

model EmployeeHasManager {
  id          Int       @id @default(autoincrement())
  employee    User      @relation("employee", fields: [employee_id], references: [id])
  employee_id Int
  manager     User      @relation("manager", fields: [manager_id], references: [id])
  manager_id  Int
  created_at  DateTime  @default(now())
  updated_at  DateTime  @default(now()) @updatedAt
  deleted_at  DateTime?

  @@map("employee_has_manager")
}

enum EmployeeTasksStatus {
  inactive
  pending
  inprocess
  completed
}

model EmployeeTask {
  id          Int                 @id @default(autoincrement())
  name        String              @db.VarChar(255)
  start       DateTime?
  end         DateTime?
  assignedTo  EmployeesData       @relation("assignedTo", fields: [employee_id], references: [id])
  employee_id Int
  assigner    EmployeesData       @relation("assigner", fields: [assigner_id], references: [id])
  assigner_id Int
  status      EmployeeTasksStatus
  created_at  DateTime            @default(now())
  updated_at  DateTime            @default(now()) @updatedAt
  deleted_at  DateTime?
  Gallery     TaskGallery[]

  @@map("employee_tasks")
}

model TaskGallery {
  id         Int          @id @default(autoincrement())
  media      String       @db.VarChar(255)
  task       EmployeeTask @relation(fields: [task_id], references: [id])
  task_id    Int
  created_at DateTime     @default(now())
  updated_at DateTime     @default(now()) @updatedAt
  deleted_at DateTime?

  @@map("task_gallery")
}
